# load required packages
library(glmmTMB)
library(performance)
#library(MuMIn)
library(tidyverse)
set.seed(101)
n <- 500
elevation <- scale(rnorm(n, mean = 1000, sd = 100))
soil_moisture <- scale(runif(n, 0, 1))
treatment <- factor(sample(c("weeded", "unweeded"), n, replace = TRUE))
# Model abundance with environmental factors + treatment
lambda <- exp(1 + 0.6 * elevation - 0.5 * soil_moisture +
ifelse(treatment == "weeded", 0.7, 0))
# Simulate counts with excess zeros
zero_prob <- 0.5
abundance <- rpois(n, lambda)
abundance[rbinom(n, 1, zero_prob) == 1] <- 0
rare_plant_df <- data.frame(
abundance,
elevation,
soil_moisture,
treatment
)
View(rare_plant_df)
#very right skewed! many zeros!
hist(rare_plant_df$abundance)
#model 1: poisson
p_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
family = poisson(),
data = rare_plant_df)
summary(p_model)
check_model(p_model, check = "pp_check") # predictions don't match observed
source("~/git/sp25_wk4_hurdles/sp25_wk4_hurdles.R", echo=TRUE)
check_model(p_model, check = "pp_check") # predictions don't match observed
check_model(p_model, check = "overdispersion") # we are overdispersed
#check our model using check_mopdel from performance package
check_model(p_model)
summary(p_model)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ elevation + soil_moisture + treatment,
family = poisson(),
data = rare_plant_df)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 0,
family = poisson(),
data = rare_plant_df)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 0,
family = poisson(),
data = rare_plant_df)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ elevation + soil_moisture + treatment,
family = poisson(),
data = rare_plant_df)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ elevation + soil_moisture + treatment,
family = poisson(),
data = rare_plant_df)
summary(zip_model)
check_model(zip_model, check = "pp_check")
summary(zip_model)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 1,
family = poisson(),
data = rare_plant_df)
summary(zip_model)
# Model 3: ZIP - let's try again using a hurdle
hurdle_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ elevation + soil_moisture + treatment,
family = truncated_poisson(), #truncated poisson
data = rare_plant_df)
summary(hurdle_model)
summary(zip_model)
summary(p_model)
summary(zip_model)
summary(hurdle_model)
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 1,
family = truncated_poisson(),
data = rare_plant_df)
summary(zip_model)
summary(hurdle_model)
check_model(zip_model, check = "pp_check")
# Model 3: ZIP - let's try again using a hurdle
hurdle_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ elevation + soil_moisture + treatment,
family = truncated_poisson(), #truncated poisson
data = rare_plant_df)
check_model(hurdle_model, check = "pp_check")
# model 2: ZIP
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 1,
family = poisson(),
data = rare_plant_df)
check_model(zip_model, check = "pp_check")
summary(zip_model)
# model 2: ZIP
zip_model1 <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 1,
family = poisson(),
data = rare_plant_df)
zip_model <- glmmTMB(abundance ~ elevation + soil_moisture + treatment,
ziformula = ~ 1,
family = truncated_poisson(),
data = rare_plant_df)
#hurdle and ZIP do a better job than basic poisson model. they have basically identical AIC.
AIC(zip_model1, zip_model hurdle_model, p_model)
#hurdle and ZIP do a better job than basic poisson model. they have basically identical AIC.
AIC(zip_model1, zip_model, hurdle_model, p_model)
set.seed(202)
n <- 500
elevation2 <- scale(rnorm(n, mean = 1000, sd = 100))
canopy_cover <- scale(runif(n, 0, 1))
treatment2 <- factor(sample(c("burned", "unburned"), n, replace = TRUE))
# Linear predictor for mean (log-link for Gamma)
linpred <- 1 + 0.7 * elevation2 - 0.5 * canopy_cover +
ifelse(treatment2 == "burned", 0.4, 0)
mu <- exp(linpred)  # ensure positivity
phi <- 1.5          # shape parameter (higher = less variance)
# Simulate from Gamma
flower_cover <- rgamma(n, shape = phi, rate = phi / mu)
# Add zero inflation
flower_cover[rbinom(n, 1, 0.3) == 1] <- 0
# Make dataframe
cover_df <- data.frame(
flower_cover,
elevation2,
canopy_cover,
treatment2
)
View(cover_df)
#very right skewed! many zeros!
hist(cover_df$flower_cover)
#very right skewed! many zeros!
hist(cover_df$flower_cover)
# model 2 : tweedie - can handle zeros and flexible to skew
tweedie_model2 <- glmmTMB(flower_cover ~ elevation2 + canopy_cover + treatment2,
family = tweedie(),
data = cover_df)
summary(tweedie_model2)
check_model(tweedie_model2, check = "pp_check")
